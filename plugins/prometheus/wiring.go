// Package prometheus provides a plugin to generate and include a prometheus metrics server instance in a Blueprint application.
//
// # Wiring Spec Usage
//
// To instantiate a Prometheus metrics server:
//
//	collector := prometheus.Collector(spec, "prometheus")
//
// The returned `collector` can be used as an argument to metric collection functions to ensure the metrics generated by services are correctly exported to the instantiated server.
//
// # Artifacts Generated
//
//  1. The package generates a prometheus docker container that provides the server-side implementation of the Prometheus metrics server.
//  2. Instantiates a [PrometheusMetricCollector] instance for configuring the opentelemetry runtime libraries to export all generated metrics to the Prometheus server.
package prometheus

import (
    "github.com/blueprint-uservices/blueprint/blueprint/pkg/coreplugins/address"
    "github.com/blueprint-uservices/blueprint/blueprint/pkg/coreplugins/pointer"
    "github.com/blueprint-uservices/blueprint/blueprint/pkg/ir"
    "github.com/blueprint-uservices/blueprint/blueprint/pkg/wiring"
)

// [Collector] can be used by wiring specs to instantiate a prometheus docker container named `collectorName` that uses the latest prom/prometheus container
// and generates the clients needed by the generated application to communicate with the server.
//
// The returned collectorName can be used as an argument to metric collection functions to ensure the metrics generated by services are correctly exported to the instantiated server.
//
// # Wiring Spec Usage
//
//	prometheus.Collector(spec, "prometheus")
func Collector(spec wiring.WiringSpec, collectorName string) string {
    // The nodes that we are defining
    collectorAddr := collectorName + ".addr"
    collectorCtr := collectorName + ".ctr"
    collectorClient := collectorName + ".client"

    // Define the Prometheus collector
    spec.Define(collectorCtr, &PrometheusCollectorContainer{}, func(ns wiring.Namespace) (ir.IRNode, error) {
        collector, err := newPrometheusCollectorContainer(collectorCtr)
        if err != nil {
            return nil, err
        }
        err = address.Bind[*PrometheusCollectorContainer](ns, collectorAddr, collector, &collector.BindAddr)
        if err != nil {
            return nil, err
        }
        return collector, err
    })

    // Create a pointer to the collector
    ptr := pointer.CreatePointer[*PrometheusCollectorClient](spec, collectorName, collectorCtr)

    // Define the address that points to the Prometheus collector
    address.Define[*PrometheusCollectorContainer](spec, collectorAddr, collectorCtr)

    // Add the addresses to the pointer
    ptr.AddAddrModifier(spec, collectorAddr)

    // Define the Prometheus client and add it to the client side of the pointer
    clientNext := ptr.AddSrcModifier(spec, collectorClient)
    spec.Define(collectorClient, &PrometheusCollectorClient{}, func(ns wiring.Namespace) (ir.IRNode, error) {
        addr, err := address.Dial[*PrometheusCollectorContainer](ns, clientNext)
        if err != nil {
            return nil, err
        }

        return newPrometheusCollectorClient(collectorClient, addr.Dial)
    })

    // Return the pointer; anybody who wants to access the Prometheus collector should do so through the pointer
    return collectorName
}
